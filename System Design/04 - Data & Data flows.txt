Data remains at the core of any system.
data is in different forms in different layers -
In business layer - data is in form of img/video/text etc.
In application layer - data is in form of json, xml
In datastores (databases) - data is in the form of tables, indexes, trees, lists etc.
In network layer - data is in the form of packets.
In physical layer - data is in the form of 0's and 1's.

Throughout a session, data flows from one part of the system to other and it changes it's format.
Once the type of data, datastores required and data flow is understood, designing system is halfway done.

The different datastores -
1. databases 
2. queues
3. caches
4. indexes

The data stored in the datastores will flow from one component to other
for eg - from application to queue to DB, from cache to application etc
The different dataflow methods are -
1. API's
2. events
3. messages 

Now, we have to keep in mind that from where the data will flow and to which component so that the dataflow becomes efficient.
This depends on the kind of data u are storing and the kind of requirement the system has.
For example -
Databases - [userID, userName, userPhoneNumber, deptId]
Cache - [Request : response]
Queues - [send sms request, send email request, send print request]
Indexes - [most searched items, items searched in last 1 hour]


Data comes/generated from -
1. users - they interact with system, they enter data, delete data etc. like - calendar - user adds info to it. 
2. internal - data about data. for eg - logs of application, browsing history etc.
3. insights - generated by system from the existing data or from user's data.

Factors to be considered about data before designing the system -
1. Type of data - text/images/videos ? - a system which deals with only text will be different from one which uses videos/images. It will also decide which DB we are going to use.
2. Volume of data - a system handling TB's of data will certainly be different from one which handles MB's or GB's of data.
3. consumption and retrieval of data - There can be systems which are consuming a lot of data OR which are producing a lot of data. There could even be both - high retrieval and high creation volume of data. VOLUME & READ&WRITE
4. Security - Transactional system require very high security. Is the data security very important to serve the requirement?


examples -
authorization system - volume of data is not high. but high level of security is essential.
streaming system - high volume of data, high retrieval rate
Transactional systems - eg - banking systems, ecommerce - journey of the data is very important. The transactions should not happen twice. Security is also important.
Heavy compute systems - AI systems, image recognition systems, video processing using ML models. Retrieval may not be that high but a lot of data will be uploaded and lot of computation is going to be performed in such systems.

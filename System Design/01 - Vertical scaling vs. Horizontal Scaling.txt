suppose we have an application. People want to use our application; but I won't give my code to everyone.
I would expose my s/w using API's. They will REQUEST something and I will give RESPONSE.
Now this application will be running on a computer which will handle all the REQUEST & RESPONSEs.

suppose my application becomes very popular and many people want to use it, then my machine needs to handle all those requests. Since they are paying me for my application, I need to keep my computer ON all the time.
I can either have 1 big powerful machine to handle all those incoming requests.    (aka Vertical Scaling)
OR 
I can have multiple machines which will have my application running on them and they will handle the requests.  (aka Horizontal Scaling)

The ability to handle the more #requests by increasing the power of 1 machine or number of machines is called "SCALABILITY".


Differences b/w the two types of scaling

Vertical Scaling
1. 1 big powerful machine.
2. Single point of failure
3. Data consistency is maintained....well everything is within 1 machine.
4. No load balancing required.
5. Interprocess communication, so, it is fast.
6. Hardware limitations. We can't just keep making the computer bigger and bigger. We have to think about the cost as well.

Horizontal Scaling
1. multiple machines.
2. Resilient - since even if 1 or 2 computers go down, the rest will handle the incoming requests.
3. There is data inconsistency. If there is requirement of an atomic task, then, we might need to lock the database on all the machines and then proceed after the task is done. Here there is loose transactional gaurantee. 
4. Requires load balancing
5. If communication between servers is required, it is done over network(network calls or Remote Procedure Calls aka RPC's) and that is slow. 
6. Scales well as number of users increase. we can add more machines.


In real world scenarios, both vertical and horizontal scaling is used.
The good parts of Vertical scaling (i.e. Point #3 and #5) and Horizontal scaling(i.e. Point #2 and #6) both come in handy.